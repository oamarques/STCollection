%******************************************************************************%
% This file describes all macros (key words) implemented in STETESTER,         %
% and examples on how to use those macros. It can also be used as a            %
% (simple) input file for the tester, e.g.,                                    %
% dstetester.x < README.in                                                     %
%*******************************************************************************
%                                                                              %
% Updated on 10/22/2020 by Osni Marques (LBNL)                                 %
%                                                                              %
% Purpose:                                                                     %
% =======                                                                      %
%                                                                              %
% STETESTER is a program to test the symmetric tridiagonal eigenvalue solvers  %
% implemented in LAPACK. (The _ can be D for double precision or S for single  %
% precision.)                                                                  %
%                                                                              %
% The test matrices used by STETESTER can be generated automatically (as       %
% described below) or generated from data read from files. In this case, the   %
% the file may contain an eigenvalue (or singular value) distribution, from    %
% which a symmetric tridiagonal matrix will then be generated, or the file     %
% defines the entries of a symmetric tridiagonal (or bidiagonal) matrix.       %
%                                                                              %
% Input data for STETESTER:                                                    %
% ========================                                                     %
%                                                                              %
% Input data for STETESTER are specified by means of macro commands (or        %
% key words). These macros are groups of characters that uniquely define a     %
% specific subset of the input data, such as matrix types and dimensions,      %
% matrices to be read from files, etc.                                         %
%                                                                              %
% Macros can be specified in any order, either in lower or upper case, with    %
% the corresponding subset of data they define. Data can be separated by       %
% blanks or commas, and the character % is interpreted as the beginning        %
% of a comment. Therefore, a line beginning with % is ignored.                 %
%                                                                              %
% In the directory INPUT the user should find many examples of input files,    %
% such as                                                                      %
%                                                                              %
%    test_easy.in                                                              %
%    test_mild.in                                                              %
%    test_hard.in                                                              %
%                                                                              %
% Also, after a successful compilation, the user can do                        %
%                                                                              %
%    dstetester.x < README.in                                                  %
%                                                                              %
% i.e., using this file as input.                                              %
%                                                                              %
% The macros currently supported by STETESTER are described below. In the      %
% sequence, macros and other character entries are written between quotes      %
% to distiguish them from numerical data.                                      %
%                                                                              %
%------------------------------------------------------------------------------%
% "CALLST"  "CALLST_LIST"                                                      %
%     Sets the subroutines to be tested, where "CALLST_LIST" can be            %
%         "STEQRV"  (calls DSTEQR with COMPZ='V'),                             %
%         "STEVXA"  (calls DSTEVX with RANGE='A'),                             %
%         "STEVXI"  (calls DSTEVX with RANGE='I'),                             %
%         "STEVXV"  (calls DSTEVX with RANGE='V'),                             %
%         "STEDCI"  (calls DSTEDC with COMPZ='I'),                             %
%         "STEGRA"  (calls DSTEGR with RANGE='A'),                             %
%         "STEGRI"  (calls DSTEGR with RANGE='I'),                             %
%         "STEGRV"  (calls DSTEGR with RANGE='V'),                             %
%         "ALL"     (all the tests above).                                     %
% Example:                                                                     %
  CALLST STEDCI STEGRA STEGRI STEGRV
%------------------------------------------------------------------------------%
% "DUMP"  "LIST"                                                               %
%     Defines data to be written into files, where "LIST" can be one of        %
%     the following                                                            %
%         "T"        file "_stetester_dump.T",                                 %
%                    tridiagonal matrix (i,d_i,e_i)                            %
%         "W"        file "_stetester_dump.W",                                 %
%                    eigenvalues                                               %
%         "Z"        file "_stetester_dump.Z",                                 %
%                    eigenvectors                                              %
%         "LOG"      file "_stetester_dump.log",                               %
%                    timing, residuals, orthogonality                          %
%         "T_MAT"    file "_stetester_dump.m",                                 %
%                    tridiagonal matrix in Matlab script format                %
%         "W_MAT"    file "_stetester_dump.m",                                 %
%                    eigenvalues in Matlab script format                       %
%         "Z_MAT"    file "_stetester_dump.m",                                 %
%                    eigenvectors in Matlab script format                      %
%         "SVD_MAT"  file "_stetester_dump.m",                                 %
%                    bidiagonal matrices, singular values and vectors, in      %
%                    Matlab script format                                      %
% Example:                                                                     %
  DUMP LOG T_MAT
%------------------------------------------------------------------------------%
% "ECOND"  K                                                                   %
%     Sets COND, which is used in the generation of built-in eigenvalue        %
%     distributions 1 to 5. K (integer) can be                                 %
%         = 1, COND = 1 / SQRT(ULP), default,                                  %
%         = 2, COND = 1 / (N*SQRT(ULP)),                                       %
%         = 3, COND = 1 / (10*N*SQRT(ULP)),                                    %
%         = 4, COND = 1 / ULP,                                                 %
%         = 5, COND = 1 / (N*ULP),                                             %
%         = 6, COND = 1 / (10*N*ULP),                                          %
%     where                                                                    %
%         ULP = (relative machine precision)*(base of the machine)             %
%         N   = dimension of the matrix to be generated                        %
% Example:                                                                     %
  ECOND 3
%------------------------------------------------------------------------------%
% "EDIST"  K                                                                   %
%     Resets the type of the distribution to be used to generate random        %
%     eigenvalues. K (integer) can be                                          %
%         = 1, uniform distribution (-1,1), default,                           %
%         = 2, uniform distribution ( 0,1),                                    %
%         = 3, normal distribution  ( 0,1)                                     %
% Example:                                                                     %
  EDIST 2
%------------------------------------------------------------------------------%
% "ESIGN"  K                                                                   %
%     Assigns signs to the eigenvalues. K (integer) can be                     %
%         = 0, the eigenvalues will not be negative, default,                  %
%         = 1, the eigenvalues may be positive, negative, or zero              %
% Example:                                                                     %
  ESIGN 1
%------------------------------------------------------------------------------%
% "GLUED"                                                                      %
%     Defines glued tridiagonal matrices, for example                          %
%              | T_1  g_1      |                                               %
%          T = | g_1  T_2  g_2 |                                               %
%              |      g_2  T_3 |                                               %
%     The next four lines must define                                          %
%          GFORM( 1 )  GFORM( 2 ) ... GFORM( K-1 )  GFORM( K )                 %
%          GTYPE( 1 )  GTYPE( 2 ) ... GTYPE( K-1 )  GTYPE( K )                 %
%          GSIZE( 1 )  GSIZE( 2 ) ... GSIZE( K-1 )  GSIZE( K )                 %
%          GAMMA( 1 )  GAMMA( 2 ) ... GAMMA( K-1 )                             %
%     where GFORM (integer) defines how the matrix is generated                %
%          = 1, built-in eigenvalue distribution,                              %
%          = 2, built-in tridiagonal matrix,                                   %
%     GTYPE (integer) defines the built-in eigenvalue distribution or matrix   %
%     (accordingly to GFORM), GSIZE (integer) defines the dimension of the     %
%     matrix, and GAMMA (real) defines the glue factor.                        %
% Example:                                                                     %
  GLUED                 
  1      2 
  3      4
  10     12
  0.01
%------------------------------------------------------------------------------%
% "HBANDA"  K                                                                  %
%     Sets the halfbandwidth of the symmetric matrix to be generated and       %
%     then tridiagonalized. K (integer) should be a number between 1 and 100,  %
%     then a matrix with max(1,N*(K/100)) subdiagonals is generated. By        %
%     default, K=100.                                                          %
% Example:                                                                     %
  HBANDA 75
%------------------------------------------------------------------------------%
% "HBANDR"  K                                                                  %
%     Sets the halfbandwidth of the matrices Z'*T*Z and Z'*Z used in the       %
%     tests (1) and (2) defined below. K (integer) should be a number between  %
%     1 and 100, then max(1,N*(K/100)) subdiagonals of those matrices are      %
%     computed. If K=0 the tests are not performed and are simply set to       %
%     0. By default, K=100.                                                    %
% Example:                                                                     %
  HBANDR 75
%------------------------------------------------------------------------------%
% "ISEED"  ISEED( 1 )  ISEED( 2 )  ISEED( 3 )  ISEED( 4 )                      %
%     Resets the seed of the random number generator. Each entry of            %
%     ISEED (integer) should lie between 0 and 4095 inclusive and ISEED(4)     %
%     should be odd. By default the initial seed is 4, 3, 2, 1.                %
% Example:                                                                     %
  ISEED 41 31 21 11
%------------------------------------------------------------------------------%
% "MATRIX"  "MATRIX_TYPE"                                                      %
%     Defines built-in matrices to be used in the tests, where "MATRIX_TYPE"   %
%     is                                                                       %
%          B for a bidiagonal matrix,                                          %
%          T for a tridiagonal matrix,                                         %
%     and the next two lines must define                                       %
%          MTYPE( 1 )  MTYPE( 2 )  MTYPE( 3 ) ...                              %
%          MSIZE( 1 )  MSIZE( 2 )  MSIZE( 3 ) ...                              %
%     where MTYPE(integer) is a list of built-in tridiagonal matrices (the     %
%     implemented types are described below), and MSIZE (integer) is a list    %
%     of dimensions of the matrices to be generated. The dimensions can        %
%     also be defined by NMIN[:NINC]:NMAX, NMIN>0, NINC>0, NMAX>=NMIN.         %
%     Unless TGK=.TRUE., a bidiagonal matrix will be mapped into a             %
%     tridiagonal matrix.                                                      %
% Example:                                                                     %
  MATRIX T
  4  5 
  11 12 13
  MATRIX T
  4  5 
  15:18  10:3:22
%------------------------------------------------------------------------------%
% "MATRIXF"  "MATRIXF_TYPE"  "MATRIXF_FILE"                                    %
%     Defines a file containing a matrix, where "MATRIXF_TYPE" is              %
%          B for a bidiagonal matrix,                                          %
%          T for a tridiagonal matrix,                                         %
%     and "MATRIXF_FILE" is a file name. This file should contain:             %
%          NDE                                                                 %
%          row_index_1  D( row_index_1 )  E( row_index_1 )                     %
%          row_index_2  D( row_index_2 )  E( row_index_2 )                     %
%          ...                                                                 %
%     which will then be used to generate an upper bidiagonal matrix           %
%                     E( 1 )  E( 2 )  ... E( NDE-1 )                           %
%          bidiag( D( 1 )  D( 2 )  D( 3 ) ... D( NDE ) ),                      %
%     or a symmetric tridiagonal matrix                                        %
%                      E( 1 )  E( 2 )  ... E( NDE-1 )                          %
%          tridiag( D( 1 )  D( 2 )  D( 3 ) ... D( NDE ) ),                     %
%                      E( 1 )  E( 2 )  ... E( NDE-1 ).                         %
%     Unless TGK=.TRUE. (see below) a bidiagonal matrix will be mapped         %
%     into a tridiagonal matrix.                                               %
% Example:                                                                     %
  MATRIXF  T  DATA/Fournier_100.dat
  MATRIXF  B  DATA/Fournier_100.dat
%------------------------------------------------------------------------------%
% "MINTT"  MINTT                                                               %
%     Sets the minimum accumulated timing for each test specified by CALLST    %
%     such that time_per_call * number_of_calls > MINTT (this option allows    %
%     for more accurate timings for relatively small matrices in particular    %
%     on fast processors). The default is 0.05s.                               %
% Example:                                                                     %
  MINTT 0.1
%------------------------------------------------------------------------------%
% "NRILIU"  K                                                                  %
%     Defines the number of K random indices of the smallest and largest       %
%     eigenvalues to be computed. These indices are used only in the tests     %
%     where RANGE='I'. This macro triggers the generation of lower and upper   %
%     bounds for those eigenvalues, to be used in the tests where RANGE='V',   %
%     if requested. However, these bounds are discarded if NRVLVU is also      %
%     set.                                                                     %
% Example:                                                                     %
  NRILIU 2
%------------------------------------------------------------------------------%
% "NRVLVU"  K                                                                  %
%     Defines the number of K random lower and upper bounds of intervals       %
%     to be searched for eigenvalues. These intervals are used only in the     %
%     tests where RANGE='V'.                                                   %
% Example:                                                                     %
  NRVLVU 3
%------------------------------------------------------------------------------%
% "SETTO0"  K                                                                  %
%     Specifies the number of entries that will be randomnly set to 0 in       %
%     the (symmetric tridiagonal or bidiagonal) test matrix; N*(K/100)         %
%     entries will be set to 0.                                                %
% Example:                                                                     %
% SETTO0 15
%------------------------------------------------------------------------------%
% "SNGVALF"  "SNGVALF_FILE"                                                    %
%     Defines a file containing a singular value distribution to be used in    %
%     the generation of a bidiagonal matrix, where "SNGVALF_FILE" is a file    %
%     name. This file should contain only one entry per line as follows:       %
%          NS                                                                  %
%          S( 1 )                                                              %
%          S( 2 )                                                              %
%          ...                                                                 %
%     which will then be used to generate an upper bidiagonal matrix with      %
%     singular values ( S( 1 ) S( 2 ) ... S( NS ) ).                           %
% Example:                                                                     %
  SNGVALF  DATA/B_05_1.sv
%------------------------------------------------------------------------------%
% "TOLEBZ"  TOLEBZ                                                             %
%     Sets TOLEBZ (real) the absolute error tolerance for the eigenvalues      %
%     to  be computed by DSTEBZ. The default is twice the underflow threshold  %
%     (see the leading comments of DSTEBZ for details).                        %
%------------------------------------------------------------------------------%
% "TOLEGR"  TOLEGR                                                             %
%     Sets TOLEGR (real) the absolute error tolerance for the eigenvalues to   %
%     be computed by DSTEGR. The default is twice the underflow threshold      %
%     (see the leading comments of DSTEGR for details).                        %
%     ** This option has been deprecated. **                                   %
%------------------------------------------------------------------------------%
% "SVD"                                                                        %
%     Sets the computation of SVD(B) in T = P'*[ 0 B; B' 0 ]*P if TGK is also  % 
%     set (see details below). When activated it applies to all tests.         %
%     ** This functionality is provided only upon request. **                  %
%     ** This functionality should be used with caution. **                    %
%------------------------------------------------------------------------------%
% "TGK"                                                                        %
%     Sets the test matrix to T = P'*[ 0 B; B' 0 ]*P, where B is a bidiagonal  %
%     matrix. When activated it applies to all tests. See details below.       %
%     ** This functionality should be used with caution. **                    %
%------------------------------------------------------------------------------%
% "VALSI"                                                                      %
%     Defines indices of the smallest and largest eigenvalues to be computed.  %
%     The next two lines must define                                           %
%          IL( 1 )  IL( 2 )  ...  IL( NI )                                     %
%          IU( 1 )  IU( 2 )  ...  IU( NI )                                     %
%     with 1 <= IL( I ) <= IU( I ), I=1,2,...NI. These indices are used only   %
%     in the tests where RANGE='I'.                                            %
% Example:                                                                     %
  VALSI
  1  3
  2  4
%------------------------------------------------------------------------------%
% "VALSV"                                                                      %
%     Defines lower and upper bounds of intervals to be searched for           %
%     eigenvalues. The next two lines must define                              %
%          VL( 1 )  VL( 2 )  ...  VL( NV )                                     %
%          VU( 1 )  VU( 2 )  ...  VU( NV )                                     %
%     with VL( I ) < VU( I ), I=1,2,...NV. These intervals are used only in    %
%     the tests where RANGE='V'.                                               %
  VALSV
  -5.678 1.234
  -1.234 5.678
%------------------------------------------------------------------------------%
% "VALUES"                                                                     %
%     Defines built-in eigenvalue distributions to be used in the generation   %
%     of test matrices. The next two lines must define                         %
%          ETYPE( 1 )  ETYPE( 2 )  ETYPE( 3 ) ...                              %
%          ESIZE( 1 )  ESIZE( 2 )  ESIZE( 3 ) ...                              %
%     where ETYPE (integer) is a list of built-in eigenvalue distributions     %
%     (the implemented distributions are described below), and ESIZE (integer) %
%     is a list of dimensions of the matrices to be generated. The dimensions  %
%     can also be defined by NMIN[:NINC]:NMAX, NMIN>0, NINC>0, NMAX>=NMIN.     %
% Example:                                                                     %
  VALUES
  4  5  -6
  17 24
  VALUES
  4  5  -6
  20:25  16:2:24
%------------------------------------------------------------------------------%
% "VALUESF"  "VALUESF_FILE"                                                    %
%     Defines a file containing an eigenvalue distribution to be used in the   %
%     generation of a tridiagonal matrix, where "VALUESF_FILE" is a file       %
%     name. This file should contain only one entry per line as follows:       %
%          NE                                                                  %
%          S( 1 )                                                              %
%          S( 2 )                                                              %
%          ...                                                                 %
%     which will then be used to generate a symmetric tridiagonal matrix with  %
%     eigenvalues ( S( 1 ) S( 2 ) ... S( NE ) ).                               %
% "END"                                                                        %
%     End of data (subsequent lines are ignored).                              %
% Example:                                                                     %
  VALUESF DATA/Fournier_100.eig
%------------------------------------------------------------------------------%
  END
%------------------------------------------------------------------------------%
%                                                                              %
% Built-in eigenvalue distributions (ETYPE):                                   %
% -----------------------------------------                                    %
%                                                                              %
% Type  Description                                                            %
%                                                                              %
% (1)   EIG( 1 ) = 1 and EIG( 2:N ) = 1/COND;                                  %
% (2)   EIG( 1:N-1 ) = 1 and EIG( N ) = 1/COND;                                %
% (3)   EIG( I ) = COND**(-(I-1)/(N-1));                                       %
% (4)   EIG( I ) = 1-(I-1)/(N-1)*(1-1/COND);                                   %
% (5)   Eigenvalue distribution set to random numbers in the range (1/COND,1), %
%       their logarithms are uniformly distributed;                            %
% (6)   Eigenvalue distribution set to random numbers from the same            %
%       distribution as of the rest of the matrix;                             %
% (7)   EIG( I ) = ULP*I, I = 1,2,...N-1, and EIG( N ) = 1;                    %
% (8)   EIG( 1 ) = ULP, EIG( I ) = 1 + SQRT(ULP)*(I-1), I=2,3,...N-1, and      %
%       EIG( N ) = 2;                                                          %
% (9)   EIG( 1 ) = 1, EIG( I ) = EIG( I-1 ) + 100*ULP, I=1,2,...N-1.           %
%                                                                              %
% TYPE < 0 has the same meaning as ABS(TYPE), except that the elements of EIG  %
% are reversed. For example, TYPE = -1 implies EIG( 1:N-1 ) = 1.0/COND and     %
% EIG( N ) = 1. If ESIGN = 1, then the elements of EIG are multiplied by a     %
% random sign (i.e., +1 or -1).                                                %
%                                                                              %
% Built-in matrices (MATRIX T):                                                %
% ----------------------------                                                 %
%                                                                              %
% Type  Description                                                            %
%                                                                              %
% (0)   The zero matrix.                                                       %
% (1)   The identity matrix.                                                   %
% (2)   (1,2,1) tridiagonal matrix.                                            %
% (3)   Wilkinson-type tridiagonal matrix.                                     %
% (4)   Clement-type tridiagonal matrix.                                       %
% (5)   Legendre orthogonal polynomials.                                       %
% (6)   Laguerre orthogonal polynomials.                                       %
% (7)   Hermit orthogonal polynomials.                                         %
%                                                                              %
% Built-in bidiagonal matrices (MATRIX B):                                     %
% ---------------------------------------                                      %
%                                                                              %
% Type  Description                                                            %
%                                                                              %
% (0)   The zero matrix.                                                       %
% (1)   The identity matrix.                                                   %
% (2)   bidiagonal matrix with random entries                                  %
%          a(j) = nrm2(rand(1:n-j+1,1))                                        %
%          b(j) = nrm2(rand(1:n-j,1))                                          %
% (3)   bidiagonal matrix with random entries                                  %
%          a(j) = e^x, x = rand[ 2*log(ulp), -2*log(ulp) ]                     %
%          b(j) = e^x, x = rand[ 2*log(ulp), -2*log(ulp) ]                     %
%                                                                              %
% Tests performed:                                                             %
% ---------------                                                              %
%                                                                              %
% For each subroutine defined by the macro "CALLST", the following residuals   %
% are computed:                                                                %
%                                                                              %
% (1)   || T - Z*W*Z' || / ( ||T||*N*ULP ) if M=N, otherwise                   %
%       || Z'*T*Z - W || / ( ||T||*N*ULP )                                     %
% (2)   || I - Z*Z' || / ( N*ULP ), if M=N, otherwise                          %
%       || I - Z'*Z || / ( N*ULP )                                             %
%                                                                              %
% for the eigenvalue problem T*Z = Z*W, where Z is NxM.                        %
%                                                                              %
% In addition, if TGK is activated                                             %
%                                                                              %
% (3)   max | ||u|| - 1/sqrt(2) | / ULP                                        %
% (4)   max | ||v|| - 1/sqrt(2) | / ULP                                        %
% (5)   || B - U*S*V' || / ( ||B||*N*ULP ) if M=N, otherwise                   %
%       || U'*B*V - S || / ( ||B||*N*ULP )                                     %
% (6)   || I - U*U' || / ( N*ULP ), if M=N, otherwise                          %
%       || I - U'*U || / ( N*ULP )                                             %
% (7)   || I - V*V' || / ( N*ULP ), if M=N, otherwise                          %
%       || I - V'*V || / ( N*ULP )                                             %
%                                                                              %
% Subsets of eigenvalues:                                                      %
% ----------------------                                                       %
%                                                                              %
% The tests where RANGE='I' or RANGE='V' require the values of IL, IU, VL      %
% and VU defined by the macros "VALSI" (and/or "NRILIU") and "VALSV" (and/or   %
% "NRVLVU"), respectively. If VL and VU are not set, their values are          %
% matched to the values set to IL and IU. The number of eigenvalues in         %
% RANGE are indicated by M in the output, together with GAPMIN, which          %
% is defined as the minimum gap between                                        %
%    |W(IL-1)-W(IL)| and |W(IU)-W(IU+1)|                                       %
% or                                                                           %
%    |W(right_of_VL)-W(left_of_VL)| and |W(right_of_VU)-W(left_of_VU)|         %
%                                                                              %
% Augmented T (Golub-Kahan):                                                   %
% -------------------------                                                    %
%                                                                              %
% The flag TGK activates the mode A = [ 0 B, B' 0 ], where B is a bidiagonal   %
% matrix. For form=1:5 (see below), B is a bidiagonal representation of T,     %
% i.e., (T - a*I) = B'*B for an appropriate a, such that a permutation of A    %
% results in a tridiagonal matrix with zeroes on the main diagonal. For        %
% form=6:9 (see below) B is used without any changes.                          %
%                                                                              %
% If                                                                           %
%     | d_1 e_1              |                                                 %
%     |     d_2 e_2          |                                                 %
% B = |         d_3 e_3      |                                                 %
%     |             d_4 e_4  |                                                 %
%     |                  .   |                                                 %
% Then                                                                         %
%     | 0  B |   |   0     U*S*V' |       | -S  0 |                            %
% A = |      | = |                | = J * |       | * J'                       %
%     | B' 0 |   | V*S*U'    0    |       |  0  S |                            %
% with                                                                         %
%     |  U  U |                                                                %
% J = |       | / sqrt(2)                                                      %
%     | -V  V |                                                                %
% Also,                                                                        %
%         |  0  d_1                |                                           %
%         | d_1  0  e_1            |                                           %
% A = P * |     e_1  0  d_2        | * P' = P * TGK * P'                       %
%         |         d_2  .   .     |                                           %
%         |              .   .   . |                                           %
% with                                                                         %
% P = [ e_{n+1} e_{1} e_{n+2} e_{2} ... ]                                      %
%                                                                              %
% If (s,u,v) is a singular triplet of B with ||u||=||v||=1 then (+/-s,q)       %
% are eigenpairs of TGK where ||q||=1 and q = P * ( u' +/-v' ) / sqrt(2) =     %
% ( v_1 u_1 v_2 u_2 ... v_n u_n ) / sqrt(2)                                    %
%                                                                              %
% Example (vectors are not shown):                                             %
% T =                                                                          %
%     6.3620e+00  1.4260e+00           0           0                           %
%     1.4260e+00  1.6216e+00  1.7271e+00           0                           %
%              0  1.7271e+00  3.6367e+00  1.1803e+00                           %
%              0           0  1.1803e+00  7.1933e+00                           %
% B =                                                                          %
%     2.5223e+00  5.6535e-01           0           0                           %
%              0  1.1410e+00  1.5136e+00           0                           %
%              0           0  1.1600e+00  1.0175e+00                           %
%              0           0           0  2.4815e+00                           %
% eig(T) = svd(T) = svd(B)^2 =                                                 %
%     7.6159e+00  6.7927e+00  4.0798e+00  3.2521e-01                           %
% svd(B) =                                                                     %
%     2.7597e+00  2.6063e+00  2.0199e+00  5.7027e-01                           %
% eig(A) =                                                                     %
%    -2.7597e+00 -2.6063e+00 -2.0199e+00 -5.7027e-01                           %
%     5.7027e-01  2.0199e+00  2.6063e+00  2.7597e+00                           %
%                                                                              %
% The flag SVD activates SVD(B) through BDSQR, BDSDC and BDSVDX. In addition,  %
% for BDSVDX (only) and B=U*S*V' it activates the tests (5)-(7) listed above.  %
%                                                                              %
%******************************************************************************%
%                                                                              %
% Data stored in derived data type M_DATA (matrix data)                        %
% -----------------------------------------------------                        %
%                                                                              %
% form    type    size      en   id                                            %
%                                                                              %
%   1    ETYPE   ESIZE   GAMMA   built-in eigenvalue distribution              %
%   2    MTYPE   MSIZE   GAMMA   built-in tridiagonal matrix                   %
%   3        1    NEIG       0   eigenvalue distribution read from file        %
%   4        1     NDE       0   tridiagonal matrix read from file             %
%   5    STYPE   SSIZE   GAMMA   built-in singular value distribution          %
%   6    MTYPE   MSIZE   GAMMA   built-in bidiagonal matrix                    %
%   7        1    NSVL       0   singular value distribution read from file    %
%   8        1     NDE       0   bidiagonal matrix read from file              %
%   9        -       -       -   reserved for future use                       %
%                                                                              %
%******************************************************************************%
% The user is welcome to incorporate additional test matrices in the routines  %
%    DSTEDEFVALS  (built-in eigenvalue / singular value distributions),        %
%    DSTEDEFTMTRX (built-in tridiagonal matrices) and                          %
%    DSTEDEFBMTRX (built-in bidiagonal matrices)                               %
% in which case the user is encouraged to send a note to OAMarques@lbl.gov so  %
% we can consider incorporating other test matrices in our distribution.       %
%******************************************************************************%
